#!/bin/bash
#
#   Copyright 2018 M Hightower
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# Auto power on HDMI port for late plugged in HDMI Displays.
#
documentation="https://github.com/mhightower83/misc-bash/wiki/Auto-On-HDMI-Port"
#
# An assumption is that at boot time, if a display is attched, the system
# selects good "fbset" geometry values. We will run
# "auto-on-hdmi-port --update-cache" via a oneshot systemd service to
# archive those values for later.
#
# At some later event, such as USB keybaord plugged in, we will run
# "auto-on-hdmi-port --power-on" which will wait for the display device to
# be  plugged in. This is assumed true when tvservice -n is successful
# and reports back a string "device_name=..."
#
# Some ideas were taken from these sources:
#   http://laurenceoflosangeles.blogspot.com/2015/08/configuring-udev-to-run-script-when-usb.html
#   https://www.raspberrypi.org/forums/viewtopic.php?t=12332#p952362
#
#
# We add a .rules file in /etc/udev/rules.d/ with a line like the one
# shown below. The rule triggers on an HID (Human Interface Device)
# such has keyboard, mouse, etc. and runs a script to power on the
# HDMI Port and set frame buffer geometrys.
#
# ACTION=="add", SUBSYSTEM=="hidraw", KERNEL=="hidraw*", RUN+="/usr/local/bin/auto-on-hdmi-port --power-on 30"
#
# New name auto-on-hdmi-port maybe
#

shopt -s extglob

printVar() {
  eval var="\${$1}"
  echo "${1}=${var}"
}

eval namesh_full="${0}"
[[ "${namesh_full:0:2}" = "./" ]] && namesh_full="`pwd`/${namesh_full#./}"
[[ -s "${namesh_full}" ]] && [[ -x "${namesh_full}" ]] || { echo "**** Internal logic error in expanding path">&2; exit 1000; }
namesh="${namesh_full##*/}"

option="${1,,}"
shift
unset debugOption
[[ "${option}" = "--debug" ]] && { option="${1,,}"; shift; debugOption=1; }



returnSuccess() {
  echo "returnSucess ${*}" >&2
  timeout 1s cat - >&2
  return 0
}

# Where things are or go
# tvservice="/opt/vc/bin/tvservice"
tvservice="/usr/bin/tvservice"
fbset="/bin/fbset"
udevadm="/sbin/udevadm"
systemctl="/bin/systemctl"
run_at="/usr/bin/at"
systemd_cat="/usr/bin/systemd-cat"

displayCache="/usr/local/etc/displayCache"
debuglog=/run/debug.log
unset debuglog

servicePath="/etc/systemd/system"
udev_restart="udev-restart-after-boot.service"
udev_rules="10-hid-trigger.rules"
run_at_boot="${namesh}.service"

udev_restart_full="${servicePath}/${udev_restart}"
udev_rules_full="/etc/udev/rules.d/${udev_rules}"
attention="**** "

mutexBase="/run/${namesh}.mutex"
mutexCache="${mutexBase}.update"
mutexHid="${mutexBase}.hid"

#
#
# A sandbox for testing without running as root, just place the script in a 
# folder named sandbox. Mostly used for testing install and uninstall
#
#
if [[ "${namesh_full##*/sandbox/}" = "${namesh_full##*/}" ]]; then
sandbox="${namesh_full%/${namesh}}"
udev_restart_full="${sandbox}/system/${udev_restart}"
udev_rules_full="${sandbox}/udev/${udev_rules}"
displayCache="${sandbox}/etc/displayCache"
debuglog="${sandbox}/debug.log"
unset debuglog

mutexBase="${sandbox}/run/${namesh}.mutex"
mutexCache="${mutexBase}.cache"
mutexHid="${mutexBase}.hid"
mkdir -p "${sandbox}/system/" "${sandbox}/udev/" "${sandbox}/etc/" "${sandbox}/run/"

tvservice="returnSuccess ${tvservice}"
fbset="returnSuccess ${fbset}"
udevadm="returnSuccess ${udevadm}"
systemctl="returnSuccess ${systemctl}"
run_at="returnSuccess ${run_at}"
systemd_cat="returnSuccess ${systemd_cat}"
servicePath="${sandbox}/system"
else
unset sandbox
fi
# End of sandbox


[[ -z "${debuglog}" ]] && { [[ -z "${debugOption}" ]] && debuglog=/dev/null || debuglog=/dev/stdout; }

# How long to wait for a Display to be plugged in. (seconds)
timeOut=30

# Minimum mutex hold time for "--power-on" option. This guards against
# running multiple instance when launch by udev with broad rule specifications.
minShieldTime=5

# We use this to mark files we write. This allows for them to be
# searched for with grep -r
uuid="{6c2ce070-0f6c-11e9-ab17-b74147b89fc3}"

needRoot() {
  [[ -n "${sandbox}" ]] && return 0;
  if [[ $UID -ne 0 ]]; then
    echo ""
    echo "This function needs to be run as root. Please rerun with sudo:"
    echo "  sudo ${namesh_full} ${option} ${*}"
    echo ""
    return 100
  fi
  return 0;
}

doMutex() {
  echo "($$) doMutex: ${1} `date '+%s'`"
  if ! ( mkdir "${1}" 2>/dev/null ); then
    # An instance is already running - get out.
    return 100
  fi
  echo "($$) Got mutex: ${1} `date '+%s'`"
  trap "rmdir \"${1}\" && echo \"($$) Released mutex: ${1}\" >${debuglog}; [[ -f ${debuglog} ]] && chmod 664 ${debuglog}; " EXIT
  return 0
}

updateDisplayCache() {
  local rc=0
  needRoot || return $?

  # The 1st mutex we set and leave to indicate we are or have run.
  doMutex "${mutexBase}"
  rc=$?
  if [[ $rc -ne 0 ]]; then
    echo "($$) Mutex: ${mutexBase} already taken." >&2
    return $rc
  fi

  # Then 2nd mutex indicates we are running
  doMutex "${mutexCache}"
  rc=$?
  if [[ $rc -ne 0 ]]; then
    echo "($$) Mutex: ${mutexCache} already taken." >&2
    return $rc
  fi

  [[ -n "${1}" ]] && eval displayCache="${1}"
  [[ -n "${displayCache}" ]] || return 1;
  [[ -f "${displayCache}" ]] || touch "${displayCache}";
  name=`${tvservice} -n 2>/dev/null`
  name="${name#device_name=}"
  [[ -z "${name}" ]] && return 2;

  geometry=`${fbset} -s | grep geometry | sed "s/^\s*geometry\s*//"`
  [[ -z "${geometry}" ]] && return 3;

  geometryOld=`grep "${name}" ${displayCache} | head -1 | sed "s/^.*=//"`
  [[ "${geometry}" = "${geometryOld}" ]] && return 4;


  if [[ -n "${geometryOld}" ]]; then
    sed -i "s/^\s*${name}\s*=.*$/${name}=${geometry}/" ${displayCache}
    echo "Updated \"${name}\" in ${displayCache}" >&2
#D | ${systemd_cat} -p "info"
  else
    echo "${name}=${geometry}" >>${displayCache}
    echo "Added \"${name}\" to ${displayCache}" >&2
  fi

  return 0
}

waitForDisplayAndSetup() {
  # Wait for Display to be connected to HDMI port
  # This is indicated by the device_name becoming available
  unset name
  echo "($$) timeOut=${1}"
  loopCount=0
  while [[ -z "${name}" ]]; do
    name=`${tvservice} -n 2>/dev/null`
    name="${name#device_name=}"
    if [[ -z "${name}" ]]; then
      [[ $loopCount -ge ${1} ]] && return 1
      loopCount=$(( $loopCount + 1 ))
      echo "($$) Display not connected. Sleep at `date '+%s'`"
      sleep 1
      echo "($$) Awake at `date '+%s'`"
    fi
  done;

  # Power on device
  ${tvservice} -p
  sleep 0.2 # Give time for things to settle down

  # Set Frame Buffer Gepmetry - if available
  unset geometry
  if [[ -n "${displayCache}" ]] && [[ -f "${displayCache}" ]]; then
    geometry=`grep "${name}" ${displayCache} | head -1 | sed "s/^.*=//"`
  fi

  if [[ -z "${geometry}" ]]; then
    # try and estamate some values
    echo "Display, ${name}, geometry not in \"${displayCache}\". Boot once with the display connected to the HDMI port to get them cached." >&2
    local sizeXY sizeX sizeY overscan
    overscan=15
    sizeXY=`${tvservice} -s | sed -e "s/^.*],\s*\([0-9]*x[0-9]*\).*$/\1/"`
    sizeX=$(( ${sizeXY%x*} - $overscan ))
    sizeY=$(( ${sizeXY#*x} - $overscan ))
    geometry="${sizeX} ${sizeY} ${sizeX} ${sizeY} 16"
    echo "estimated: fbset --geometry ${geometry}" >&2
  fi
  ${fbset} --geometry ${geometry}
  # ${fbset} --timings 0 0 0 0 0 0 0
  # ${fbset} -rgba 8/16,8/8,8/0,8/24
  ${fbset} -depth 8 && ${fbset} -depth 16
  return 0
}

powerOnHdmiDevice() {
  local rc
  needRoot || return $?

  # We should not run if updateDisplayCache has not run and completed first.
  [[ -d "${mutexBase}" ]] || { echo "($$) Base mutex missing."; return 100; }
  [[ -d "${mutexCache}" ]] && { echo "($$) Blocked, ${mutexCache} still running."; return 100; }
  doMutex "${mutexHid}" || return $?

  elapseTime=`date '+%s'`
  waitForDisplayAndSetup "${1}"
  rc=$?
  # The udev rule we use are not very specific so we
  # sit with mutex set to block duplicate udev invocation
  # from multiple simlilar events
  elapseTime=$(( `date '+%s'` - ${elapseTime} ))
  [[ ${elapseTime} -lt 15 ]] && sleep $(( ${minShieldTime} - ${elapseTime} ))
  return $rc
}

#
#
# Main
#
#

# trap "echo \"($$) Failed \`date '+%s'\`\";[[ ${debuglog} != \"/dev/null\" ]] && [[ -f ${debuglog} ]] && chmod 666 ${debuglog};" EXIT

if [[ "--update-cache" = "${option}" ]]; then
  updateDisplayCache >>${debuglog} || { rc=$?; [[ $rc -eq 500 ]] && exit $rc; };
  exit 0
fi

if [[ "--power-on" = "${option}" ]]; then
  [[ -n "${1}" ]] && timeOut=${1}
  powerOnHdmiDevice "${timeOut}" >>${debuglog} 3>&1
  rc=$? 
  ( [[ $rc -eq 500 ]] || [[ -n "${debugOption}" ]] ) && exit $rc;
  exit 0
fi

trap '' EXIT

if [[ "${option}" = "--detach" ]]; then
  if ! [[ -e "${mutexhid}" ]]; then
    # this works - keep
    echo "${namesh_full} --power-on ${1} >${debuglog} 2>&1; [ -f \"${debuglog}\" ] && chmod 666 ${debuglog};" | ${run_at} now
#
# Note, if I don't detach in some way udev will let me run and call
# sleep over a period of 57 seconds before it starts complaining.
# In general that should be long enough, then there is no need to install "at"
# and use --detach.
#
# These don't work when called via udev RUN+=, they die in their sleep:
# udev daemon appears to terminate detached jobs, that try to sleep,
# with extream prejudice. "trap ..."  do not get an opertunity to cleanup.
#   { $( nohup ${0} --power-on </dev/null >/dev/null 2>&1 & ) & } &
#   { $( ${0} --power-on </dev/null >>${debuglog} 2>&1 & ) & } &
#   ${0} --power-on </dev/null >>${debuglog} 2>&1 & disown
#   { nohup "${0}" "--power-on" </dev/null >/dev/null 2>&1 & } &
#   { nohup "${0}" "--power-on" & } &
  fi
  exit 0
fi


#
#
# Install Helpers
#
#

run_at_boot_txt() {
cat >&2 << /EOF

Create a systemd service, ${run_at_boot}, to run ${namesh}
at boot time. This will check for attached display and update,
${displayCache}, a list of known
working display geometry values.

/EOF

cat << /EOF
#
# If a monitor is connected to the HDMI power, capture a copy of
# the Frame Buffer geometry values.
#
# Goes in:
#   ${servicePath}/${run_at_boot}
#
# install by:
#   sudo systemctl daemon-reload
#   sudo systemctl enable ${run_at_boot}
#   sudo systemctl start ${run_at_boot}
#
[Unit]
Description=${namesh}: Update ${displayCache}
Documentation=${documentation}
After=network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes
# RuntimeDirectory=
# RuntimeDirectoryMode=
# ExecStart=/bin/sh -ec '[ -s "${namesh_full}" ] && [ -x "${namesh_full}" ] && ${namesh_full} --update-cache; exit 0;'
ExecStart=${namesh_full} --update-cache
ExecStopPost=/bin/rmdir /run/${namesh}.mutex
StandardOutput=journal
StandardError=journal+console

[Install]
WantedBy=multi-user.target
#
# ${uuid}
/EOF

}

udev_rule_txt() {
cat >&2 << /EOF

You will need a .rules file in ${udev_rules_full}
with something like this:

/EOF
cat << /EOF
#
# When a keybaord, mouse, or other HID device is plugged in, run a bash script
# that polls every second (up to 30 seconds) waiting for a display to be
# plugged into the HDMI port. Then run "tvservice -p" to power on device, etc.
# Change the 30 for longer or short wait periods up to 57 secs.
#
ACTION=="add", SUBSYSTEM=="hidraw", KERNEL=="hidraw*", RUN+="${namesh_full} --power-on 30"
#
# ${uuid}
/EOF
}

udev_hack_txt() {
cat >&2 << /EOF

It has been observed that  the systemd-udevd daemon, on Raspbian systems,
is running with with the root filesystem, "/", mounted RO! Thus all 
scripts launched by it, don't have write permission on some files/sockets.
This service attempts to work around that problem.

/EOF

cat << /EOF
#
# This is taken from:
#   https://github.com/raspberrypi/linux/issues/2497#issuecomment-450255862
#
# Goes in:
#   ${servicePath}/${udev_restart}
#
# install by:
#   sudo systemctl daemon-reload
#   sudo systemctl enable ${udev_restart}
#   sudo systemctl start ${udev_restart}
#
[Unit]
Description=Restart udev service after boot (ugly hack to work around file system being readonly)

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/bin/systemctl restart systemd-udevd.service

[Install]
WantedBy=multi-user.target
#
# ${uuid}
/EOF
}

printUsage() {
cat << /EOF

Usage for "${namesh_full}":

  sudo ${namesh} --install

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    Installs systemd service to run the command "${namesh} --update-cache"
    at boot time. Installs udev rules to run the command "${namesh} --power-on"
    when a USB HID device is connected. eg. Plugging in a USB keyboard or USB mouse.
/EOR`


  sudo ${namesh} --uninstall

    Undo "${namesh} --install".



  Next two options are for reference.

  ${namesh} --power-on [how long to wait in seconds, optional]

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    This command is used to start the script, to monitor for a display
    connected to the HDMI port. When the display is connected, it runs
    the programs to set up the HDMI port. This is the command that is
    launched via the udev rules RUN command. (must run from root)
/EOR`


  ${namesh} --update-cache

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    This command is issued at boot time by the systemd service
    ${run_at_boot}.  This script option will capture and
    record the geometry of a working display with its device_name value.
    This information is stored in the file "${displayCache}".
    (must run from root)
/EOR`


  ${namesh} --help

    Prints this message.


  ${namesh} --help-dev

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    Prints help on some depricated options that were used during develpment.
/EOR`

/EOF
}

printDevUsage() {
cat << /EOF

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/  /'
  These two should not be needed; however, to be complete they are here.
  It was handy when developing the script.
/EOR`


  sudo ${namesh} --install-udev-hack

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    This will install a systemd service to work around a problem related
    to udev being started with read-only file system access. This
    restriction is inherated by the processes launched by the rules RUN
    parameter. For this script, it is only a problem when writing a
   debug file.
/EOR`


  sudo ${namesh} --uninstall-udev-hack

    Undo "${namesh} --install-udev-hack"



`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/  /'
  The remaining options are for reference only. Depricated.
  Some could be used if you wanted to install and uninstall by hand.
/EOR`


  ${namesh} --print-run-at-boot

    Prints the text for a systemd service to run at boot time.


  ${namesh} --print-udev-rule

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    Prints the text for a .rules file, you need to place it in
    "/dev/udev/rules.d/"
/EOR`


  ${namesh} --print-udev-hack

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    Prints the text for a systemd service, to work around a
    problem with udev stating with read-only file system
    access.
/EOR`


  ${namesh} --save-files

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    Write all the files of the above print text list to the current
    directory. Will overwrite existing files w/o warning.
/EOR`


  ${namesh} --detach

`sed -e 's/^\s*//;s/\s*$//' << /EOR | tr '\n' ' ' | fmt -u -g64 | sed -e 's/^/    /'
    Option for udev .rules to use "at" to run scripts that detach and
    take a very long time. In most cases will not be needed.
    Requires that the "at" utility be installed.
    (must run from root)
/EOR`


  ${namesh} --uninstall-help

    Instructions for a manual uninstall.

/EOF
}

trap "" EXIT
generateFiles() {
  run_at_boot_txt >"${run_at_boot}"
  echo "Saved to: ${run_at_boot}"
  udev_rule_txt >"${udev_rules}"
  echo "Saved to: ${udev_rules}"
  udev_hack_txt >"${udev_restart}"
  echo "Saved to: ${udev_restart}"
  echo ""
}

mkUniqueComment() {
  [[ -z "${1}" ]] && return 1000
  sha1=`sha1sum ${1}`
  echo "# [${namesh}:] ${sha1%% *}"
#  echo "# Unique Identifier for uninstall do not remove this line. [${namesh}:] Checksum: (`sum ${1} | sed -e 's/[[:space:]]\+/:/g'`)"
#  local zzz=`sum ${1}`
#  printf "# Unique Identifier for uninstall. Do not remove this line. [${namesh}:] Checksum: (%d:%d)\n" ${zzz##+(0)}
}

checkTag() {
  [[ -z "${1}" ]] && return 1000

  expectedTag="`head -n-1 \"${1}\" | mkUniqueComment -`"
  actualTag="`tail -1 \"${1}\"`"
  [[ "${expectedTag}" = "${actualTag}" ]] && return 0 || return 1;
}

install_udev_rule() {
  # setup udev rule
  echo -e "\nInstalling udev rules file \"${udev_rules_full}\" ..."
  if [[ -s "${udev_rules_full}" ]]; then
    echo "${attention}The file \"${udev_rules_full}\" already exit,"
    echo "${attention}no changes were made. Please verify its content, is equal to:"
    echo ""
    udev_rule_txt 2>/dev/null
  else
    udev_rule_txt 2>/dev/null >"${udev_rules_full}"
    mkUniqueComment "${udev_rules_full}" >>"${udev_rules_full}"
  fi
#D  echo -e "Restarting udevadm ..."
  ${udevadm} control --reload-rules && ${udevadm} trigger
}

uninstall_dev_rule() {
  echo -e "\nUninstalling udev rules file \"${udev_rules}\" ..."
  if ! [[ -f "${udev_rules_full}" ]]; then
    echo "${attention}The udev rules file, \"${udev_rules}\", does not appear to be installed."
    echo "${attention}The file \"${udev_rules_full}\" is missing."
    return 100
  fi

  if checkTag "${udev_rules_full}"; then
    removeFile "${udev_rules_full}"
    ${udevadm} control --reload-rules && ${udevadm} trigger
  else
    echo "${attention}The udev rules file, \"${udev_rules}\", has been edited."
    echo "${attention}The file was NOT deleted."
    echo "${attention}Leaving the file at \"${udev_rules_full}\"."
    echo "${attention}If you no longer want this file, you must delete it and run the command:"
    echo "${attention}  sudo ${udevadm} control --reload-rules && ${udevadm} trigger"
    return 100
  fi
  return 0
}

installService() {
  local shortName="${1}" textFunction="${2}" nostart="${3}"
  [[ -n "${1}" ]] && [[ -n "${2}" ]] || { echo "installService requires 2 parameters" && return 1000; };

  echo -e "\nInstalling systemd service \"${shortName%.service}\" ..."
  if [[ -s "${servicePath}/${shortName}" ]]; then
    echo "${attention}The file \"${servicePath}/${shortName}\" already exist."
    echo "${attention}No changes were made. Please verify its content, is equal to:"
    echo ""
    ${textFunction} 2>/dev/null
    return 100
  else
    ${textFunction} 2>/dev/null >"${servicePath}/${shortName}"
    mkUniqueComment "${servicePath}/${shortName}" >>"${servicePath}/${shortName}"
    ${systemctl} daemon-reload
    ${systemctl} enable "${shortName}"
    [[ -n "${nostart}" ]] || ${systemctl} start "${shortName}"
  fi
  return 0
}

removeFile() {
  if [[ -n "${1}" ]] && [[ -f "${1}" ]]; then
    if rm ${1}; then
      echo "Successfuly removed ${1}."
    else
      echo "${attention}Failed to remove ${1}."
      echo "${attention}You will need to remove it by hand."
    fi
  fi
}

uninstallService() {
  local shortName="${1}" expectedTag
  [[ -n "${1}" ]] || { echo "uninstallService requires 1 parameter" && return 1000; };

  echo -e "\nUninstalling systemd service \"${shortName%.service}\" ..."
  if ! [[ -f "${servicePath}/${shortName}" ]]; then
    echo -e "${attention}The systemd service \"${shortName%.service}\" does not appear to be installed."
    echo "${attention}The file \"${servicePath}/${shortName}\" is missing."
    return 100
  fi

  ${systemctl} stop "${shortName}"
  ${systemctl} disable "${shortName}"

  if checkTag "${servicePath}/${shortName}"; then
    removeFile "${servicePath}/${shortName}"
  else
    echo "${attention}The file for service \"${shortName%.service}\" has been edited."
    echo "${attention}The file was NOT deleted; however, the service has been disabled."
    echo "${attention}Leaving the file at \"${servicePath}/${shortName}\"."
    echo "${attention}If you no longer want this file, you must delete it."
    return 100
  fi
  ${systemctl} daemon-reload
  return 0
}

installit() {
  local rc
  needRoot || return $?;
  installService "${run_at_boot}" "run_at_boot_txt"
#  installService "${udev_restart}" "udev_hack_txt"
  install_udev_rule
  echo -e "\nFinished."
  return 0
}

uninstallit() {
  local rc
  needRoot || return $?;

  uninstall_dev_rule
#  uninstallService "${udev_restart}"
  uninstallService "${run_at_boot}"
}

uninstallHelp() {
cat >&2 << /EOF

Typical commands for complete uninstall of ${namesh}
Must run as root:

/EOF

cat << /EOF

rm "${udev_rules_full}"
${udevadm} control --reload-rules && ${udevadm} trigger

${systemctl} stop "${udev_restart}"
${systemctl} disable "${udev_restart}"
${systemctl} stop "${run_at_boot}"
${systemctl} disable "${run_at_boot}"
rm "${servicePath}/${udev_restart}"
rm "${servicePath}/${run_at_boot}"
${systemctl} daemon-reload

/EOF
return 0
}

[[ "${option}" = "--install"             ]] && { installit;     exit 0; }
[[ "${option}" = "--uninstall"           ]] && { uninstallit;   exit 0; }
[[ "${option}" = "--uninstall-help"      ]] && { uninstallHelp; exit 0; }
[[ "${option}" = "--install-udev-hack"   ]] && { installService "${udev_restart}" "udev_hack_txt"; exit 0; }
[[ "${option}" = "--uninstall-udev-hack" ]] && { uninstallService "${udev_restart}" "udev_hack_txt"; exit 0; }

[[ "${option}" = "--print-run-at-boot" ]] && { run_at_boot_txt;  exit 0; }
[[ "${option}" = "--print-udev-rule"   ]] && { udev_rule_txt; exit 0; }
[[ "${option}" = "--print-udev-hack"   ]] && { udev_hack_txt; exit 0; }
[[ "${option}" = "--save-files"        ]] && { generateFiles; exit 0; }
[[ "${option}" = "--help"              ]] && { printUsage;    exit 0; }
[[ "${option}" = "--help-dev"          ]] && { printDevUsage;    exit 0; }
[[ "${option}" = "--print-uuid"        ]] && { echo -n "${uuid}"; exit 0; }

printUsage | less
exit 0


miscdebugscraps() {
  printVar "displayCache"
  printVar "geometry"
  printVar "geometryOld"
  printVar "name"
}
